/* ----------------------------------------------------------------------------		Ghost Comps is a set of controls to manipulate user interface objects.		Copyright (C) 2010 Jan CÃ¡ssio	---------------------------------------------------------------------------   		This library is free software; you can redistribute it and/or modify	it under the terms of the GNU Lesser General Public License as published	by the Free Software Foundation; either version 2.1 of the License, or	(at your option) any later version.				This library is distributed in the hope that it will be useful, but	WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY	or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public	License for more details. 		You should have received a copy of the GNU Lesser General Public License	along with this library; if not, write to the Free Software Foundation,	Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 	Ghost Comps Project	http://github.com/jancassio/ghostcomps/		------------------------------------------------------------------------ */package ghost.comps.controls{	import ghost.comps.GhostComp;	import ghost.events.SliderEvent;	import ghost.helpers.Slider2D;	import flash.display.DisplayObject;	import flash.errors.IllegalOperationError;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.geom.Rectangle;	/**	 *  This class composes a slider ui object.	 *	Only area field is required to create this.	 *		 *  @author jancassio | janio@jancassio.com	 */	public class SliderGhost extends GhostComp	{			public var slideSize : Number;
				private var slider	: Slider2D;								// [ composition fields ] ---------------------------------------------				private var _area	: DisplayObject;		private var _drag	: BtnGhost;		private var _up		: BtnGhost;		private var _down	: BtnGhost;		private var _left	: BtnGhost;		private var _right	: BtnGhost;						// [ Default body's manipulated parts names ] -------------------------				private var areaName : String;		private var dragName : String;
		private var upName : String;
		private var downName : String;
		private var leftName : String;
		private var rightName : String;
						// [ Error messages ] -------------------------------------------------				private static const AREA_ERROR : String = "Slider2DGhostComp object requires an instance of Sprite/MovieClip to define draggable area.";												// [ Setup ] ----------------------------------------------------------				/**		 *	@constructor		 *	Creates a new Slider2DGhostComp instance.		 */		public function SliderGhost (body : * = null, lockAxis : String = "vertical", slideSize : Number = .1)		{			slider = new Slider2D;			slider.axis = lockAxis;			this.body = body;			this.slideSize = slideSize;		}				override protected function anatomy () : void		{			areaName	= "area_mc";			dragName	= "drag_mc";			upName		= "up_mc";			downName	= "down_mc";			leftName	= "left_mc";			rightName	= "right_mc";		}												/**		 *	@inheritDoc		 */		override public function set body (value : *) : void		{				if( !value ) return;						super.body	= value;			area		= value[ areaName ];			drag		= value[ dragName ];			up			= value[ upName ];			down		= value[ downName ];			left		= value[ leftName ];			right		= value[ rightName ];		}												// [ Get/Set ] --------------------------------------------------------				/**		 *	Makes/Retrives the draggable area.		 */		public function set area (value : DisplayObject) : void		{			if(!value)				throw new IllegalOperationError ( AREA_ERROR );						_area  = value;			slider.area = new Rectangle(value.x, value.y, value.width, value.height);		}				public function get area () : DisplayObject		{			return _area ;		}				/**		 *	The free x and y axis draggable object.		 */		public function set drag (value : DisplayObject) : void		{			if(!_drag) _drag = new BtnGhost;			else _drag.dispose();						_drag.body = value;			_drag.onPress = onDragPress;			_drag.onRelease = _drag.onReleaseOutside = onDragRelease;						listenSlider();		}				public function get drag () : DisplayObject		{			return _drag.body as DisplayObject;		}				public function set up(value:Object):void		{			_up = new BtnGhost(value);			_up.onClick = onUpClick;		}				public function get up():Object		{			return _up;		}				public function set down(value:Object):void		{			_down = new BtnGhost(value);			_down.onClick = onDownClick;		}				public function get down():Object		{			return _down;		}				public function set left(value:Object):void		{			_left = new BtnGhost(value);			_left.onClick = onLeftClick;		}				public function get left():Object		{			return _left;		}				public function set right(value:Object):void		{			_right = new BtnGhost(value);			_right.onClick = onRightClick;		}				public function get right():Object		{			return _right;		}						public function dispose():void		{			unlistenSlider();			slider.dispose();			_up		= undefined;			_right	= undefined;			_down	= undefined;			_left	= undefined;		}												// [ Listening ] ------------------------------------------------------				private function listenSlider () : void		{			slider.addEventListener(SliderEvent.DRAG, onSliderDrag);			slider.addEventListener(SliderEvent.DROP, onSliderDrop);			slider.addEventListener(SliderEvent.UPDATE, onSliderUpdate);		}				private function unlistenSlider () : void		{			slider.removeEventListener(SliderEvent.DRAG, onSliderDrag);			slider.removeEventListener(SliderEvent.DROP, onSliderDrop);			slider.removeEventListener(SliderEvent.UPDATE, onSliderUpdate);		}												// [ Handlers ] -------------------------------------------------------				private function onDragPress (e:MouseEvent) : void		{			_drag.hit.stage.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove, false, 0, true);			_drag.body.startDrag(false, slider.area);			slider.dispatch( SliderEvent.DRAG );		}		private function onMouseMove (e:MouseEvent) : void		{			slider.position = new Point( _drag.body.x, _drag.body.y );			e.updateAfterEvent();		}		private function onDragRelease (e:MouseEvent) : void		{			_drag.hit.stage.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);			_drag.body.stopDrag();			slider.dispatch( SliderEvent.DROP );		}				private function onUpClick (e:MouseEvent) : void		{			slider.percentageY -= slideSize;		}				private function onDownClick (e:MouseEvent) : void		{			slider.percentageY += slideSize;		}				private function onLeftClick (e:MouseEvent) : void		{			slider.percentageX -= slideSize;		}				private function onRightClick (e:MouseEvent) : void		{			slider.percentageX += slideSize;		}				private function onSliderDrag (e:SliderEvent) : void		{			dispatchEvent( e.clone() );		}				private function onSliderDrop (e:SliderEvent) : void		{			dispatchEvent( e.clone() );		}				private function onSliderUpdate (e:SliderEvent) : void		{			_drag.body.y = slider.positionY;			_drag.body.x = slider.positionX;			dispatchEvent( e.clone() );		}	}}